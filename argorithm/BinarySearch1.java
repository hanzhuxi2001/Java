package argorithm;

import javaCore.BubbleSorter;

public class BinarySearch1 {
	public static int binarySearch(int[] a, int fromIndex, int toIndex, int value) {
		int low = fromIndex;
		int high = toIndex;
		while (low <= high) {
			int mid = (low + high) >>> 1;
			int midVal = a[mid];
			if (midVal < value)
				low = mid + 1;
			else if (midVal > value)
				high = mid - 1;
			else
				return mid;
		}
		return -1;
	}

	// 递归
	public static int binarySearch1(int[] a, int fromIndex, int toIndex, int value) {
		if (fromIndex > toIndex)
			return -1;
		int mid = (fromIndex + toIndex) >>> 1;
		if (a[mid] < value) {
			return binarySearch1(a, mid + 1, toIndex, value);
		} else if (a[mid] > value) {
			return binarySearch1(a, fromIndex, mid - 1, value);
		} else {
			return mid;
		}
	}

	public static void main(String[] args) {
		int[] a = { 2, 3, 5, 7, 9, 13, 18 };
		/**
		 * { 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454,
		 * 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637,
		 * 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3,
		 * 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3,
		 * 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13,
		 * 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5,
		 * 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53,
		 * 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454,
		 * 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637,
		 * 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3,
		 * 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3,
		 * 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13,
		 * 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5,
		 * 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53,
		 * 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454,
		 * 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637,
		 * 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3,
		 * 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3,
		 * 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13,
		 * 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5,
		 * 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53,
		 * 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454,
		 * 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637,
		 * 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3,
		 * 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3,
		 * 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13,
		 * 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5,
		 * 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53,
		 * 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454,
		 * 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637,
		 * 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3,
		 * 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3,
		 * 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13,
		 * 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5,
		 * 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53,
		 * 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454,
		 * 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637,
		 * 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3,
		 * 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3,
		 * 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13,
		 * 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5,
		 * 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53,
		 * 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454,
		 * 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637,
		 * 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3,
		 * 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3,
		 * 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13,
		 * 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5,
		 * 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53,
		 * 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454,
		 * 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637,
		 * 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3,
		 * 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3,
		 * 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13,
		 * 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 2, 3, 5,
		 * 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454, 5, 43, 53,
		 * 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637, 4, 5, 454,
		 * 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3, 3, 43, 637,
		 * 4, 5, 454, 5, 43, 53, 5, 2, 3, 5, 7, 9, 13, 18, 899, 3, 3, 3, 3, 3,
		 * 3, 43, 637, 4, 5, 454, 5, 43, 53, 5, 345, 4, 345, 43, 5, 34, 53, 45,
		 * 34, 5, 43, 5, 436, 54, 6, 54645, 65, 46 };
		 */
		System.out.println(a.length);

		System.out.println(binarySearch1(a, 0, a.length-1, 18));
		System.out.println(binarySearch1(a, 0, a.length-1, 18));
	}
}
